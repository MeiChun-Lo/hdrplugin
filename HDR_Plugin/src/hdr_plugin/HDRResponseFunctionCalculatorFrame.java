/*
 * HDRResponseFunctionCalculatorFrame.java
 *
 * Created on 10. November 2008, 11:30
 */
package hdr_plugin;

import hdr_plugin.calibration.DebevecCalibrator;
import ij.ImagePlus;
import ij.WindowManager;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Alexander Heidrich
 */
public class HDRResponseFunctionCalculatorFrame extends java.awt.Frame {

    /** Creates new form HDRResponseFunctionCalculatorFrame */
    public HDRResponseFunctionCalculatorFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblLogo = new javax.swing.JLabel();
        panel1 = new java.awt.Panel();
        btnCalcResp = new java.awt.Button();
        bntCancel = new java.awt.Button();
        bntHelp = new java.awt.Button();
        panel2 = new java.awt.Panel();
        lblStack = new java.awt.Label();
        chcStack = new java.awt.Choice();
        lblImageNo = new java.awt.Label();
        txtImageNo = new java.awt.TextField();
        lblPixelNo = new java.awt.Label();
        lblZmin = new java.awt.Label();
        lblExpTimes = new java.awt.Label();
        txtExpTimes = new java.awt.TextField();
        txtZmin = new java.awt.TextField();
        txtZmax = new java.awt.TextField();
        txtPixels = new java.awt.TextField();
        lblZmax = new java.awt.Label();
        label1 = new java.awt.Label();
        checkbox1 = new java.awt.Checkbox();
        checkbox2 = new java.awt.Checkbox();

        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());

        lblLogo.setIcon(new javax.swing.ImageIcon("/Users/Alex/Documents/Arbeit/HKI/ProgProj/HDR_Plugin/src/hdr_plugin/resources/log.jpg")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(lblLogo, gridBagConstraints);

        panel1.setLayout(new java.awt.GridBagLayout());

        btnCalcResp.setLabel("Calculate Response Function");
        btnCalcResp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcRespActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panel1.add(btnCalcResp, gridBagConstraints);

        bntCancel.setLabel("Cancel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panel1.add(bntCancel, gridBagConstraints);

        bntHelp.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        bntHelp.setLabel("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panel1.add(bntHelp, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        add(panel1, gridBagConstraints);

        panel2.setLayout(new java.awt.GridBagLayout());

        lblStack.setText("HDR Stack:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panel2.add(lblStack, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panel2.add(chcStack, gridBagConstraints);

        lblImageNo.setText("No. of Images to Combine:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panel2.add(lblImageNo, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panel2.add(txtImageNo, gridBagConstraints);

        lblPixelNo.setText("Number of Pixels to Calculate Response Function:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panel2.add(lblPixelNo, gridBagConstraints);

        lblZmin.setText("Min. Pixel Value:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panel2.add(lblZmin, gridBagConstraints);
        lblZmin.getAccessibleContext().setAccessibleName("Min Pixel Value:");

        lblExpTimes.setText("Exposure Times:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panel2.add(lblExpTimes, gridBagConstraints);

        txtExpTimes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtExpTimesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panel2.add(txtExpTimes, gridBagConstraints);

        txtZmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtZminActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panel2.add(txtZmin, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panel2.add(txtZmax, gridBagConstraints);

        txtPixels.setEditable(false);
        txtPixels.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panel2.add(txtPixels, gridBagConstraints);

        lblZmax.setText("Max. Pixel Value:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panel2.add(lblZmax, gridBagConstraints);

        label1.setText("Image Type:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panel2.add(label1, gridBagConstraints);

        checkbox1.setEnabled(false);
        checkbox1.setLabel("16 bit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        panel2.add(checkbox1, gridBagConstraints);

        checkbox2.setEnabled(false);
        checkbox2.setLabel("RGB");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        panel2.add(checkbox2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(6, 5, 0, 5);
        add(panel2, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        this.dispose();
    }//GEN-LAST:event_exitForm

    private int w(int z, int Zmin, int Zmax) {
        if (z <= 0.5 * (Zmin - Zmax)) {
            return z - Zmin;
        } else {
            return Zmax - z;
        }
    }

    private double calcBase(int idx, double im0, double im1, double cR) {
        return Math.pow(im0, idx) - cR * Math.pow(im1, idx);
    }

    private void btnCalcRespActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcRespActionPerformed

        // get the selected stack from ImageJ
        ImagePlus imp = WindowManager.getImage(chcStack.getSelectedItem());

        // get exposure times from textfield and prepare new double array
        String[] expTimesTemp = txtExpTimes.getText().split(",");
        double[] expTimes = new double[expTimesTemp.length];

        // get number of pixels and number of images to combine from textfields
        // if both are empty return
        int noOfImagesQ = 0;
        int noOfPixelsP = 0;
        int Zmin = 0;
        int Zmax = 0;

        noOfImagesQ = Integer.parseInt(txtImageNo.getText());
        noOfPixelsP = Integer.parseInt(txtPixels.getText());
        Zmin = Integer.parseInt(txtZmin.getText());
        Zmax = Integer.parseInt(txtZmin.getText());

        if (noOfImagesQ == 0) {
            return;
        }

        if (noOfPixelsP == 0) {
            return;
        }

        if (noOfImagesQ > imp.getStackSize()) {
            return;
        }

        if (!(noOfImagesQ == expTimes.length)) {
            return;
        }

        if (Zmin == 0) {
            return;
        }

        if (Zmax == 0) {
            return;
        }

        for (int i = 0; i < expTimesTemp.length; i++) {
            expTimes[i] = Double.parseDouble(expTimesTemp[i].trim());
        }

        Object[] imgPixels = (Object[]) imp.getStack().getImageArray();


        //MitsunagaCalibrator calibrate = new MitsunagaCalibrator(max_degree,imgPixels,Q);
        //calibrate.doIt();

//        DebevecCalibrator calibrate = new DebevecCalibrator(imgPixels, noOfImagesQ, noOfPixelsP, expTimes);
  //      calibrate.doIt();

//    int width = imp.getWidth();
//    int height = imp.getHeight();
//    HashSet<Pixel> pixels = new HashSet<Pixel>();
//    // while (pixels.size() < n) {
//    //     pixels.add(new Pixel(rnd.nextInt(0, width - 1), rnd.nextInt(0, height - 1)));
//    //  }
//
//    //Object[] imgPixels = (Object[]) imp.getStack().getImageArray();
//
//    //int A[][] = new int[width * height + n + 1][n + width];
//    //int b[] = new int[A.length];
    //short[] a = (short[]) imgPixels[0];
    //new TextWindow("huhu", Integer.toString(a[1] & 0xffff), 400, 400).setVisible(true);


//    int width = imp.getWidth();
//    int height = imp.getHeight();
//    HashSet<Pixel> pixels = new HashSet<Pixel>();
//    // while (pixels.size() < n) {
//    //     pixels.add(new Pixel(rnd.nextInt(0, width - 1), rnd.nextInt(0, height - 1)));
//    //  }
//
//    //Object[] imgPixels = (Object[]) imp.getStack().getImageArray();
//
//    //int A[][] = new int[width * height + n + 1][n + width];
//    //int b[] = new int[A.length];

    //short[] a = (short[]) imgPixels[0];
    //new TextWindow("huhu", Integer.toString(a[1] & 0xffff), 400, 400).setVisible(true);

}//GEN-LAST:event_btnCalcRespActionPerformed

    private void txtExpTimesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtExpTimesActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_txtExpTimesActionPerformed

    private void txtZminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtZminActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_txtZminActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new HDRResponseFunctionCalculatorFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button bntCancel;
    private java.awt.Button bntHelp;
    private java.awt.Button btnCalcResp;
    private java.awt.Choice chcStack;
    private java.awt.Checkbox checkbox1;
    private java.awt.Checkbox checkbox2;
    private java.awt.Label label1;
    private java.awt.Label lblExpTimes;
    private java.awt.Label lblImageNo;
    private javax.swing.JLabel lblLogo;
    private java.awt.Label lblPixelNo;
    private java.awt.Label lblStack;
    private java.awt.Label lblZmax;
    private java.awt.Label lblZmin;
    private java.awt.Panel panel1;
    private java.awt.Panel panel2;
    private java.awt.TextField txtExpTimes;
    private java.awt.TextField txtImageNo;
    private java.awt.TextField txtPixels;
    private java.awt.TextField txtZmax;
    private java.awt.TextField txtZmin;
    // End of variables declaration//GEN-END:variables
}
